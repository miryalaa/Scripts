<#
Script Name : VMwareTools_1305_Cleanup_Fixed.ps1
Purpose     : Verify VMware Tools version 13.0.5 installed. 
              If not, reboot. If yes, clean registry entries below 13.0.5, verify installed version, and reboot.
Author      : Anup's Assistant (GPT-5)
Requires    : Run as Administrator
#>

# ============================================================
# Helper functions (defined up-front)
# ============================================================

function Normalize-Version {
    param(
        [Parameter(Mandatory=$true)][string]$VersionString
    )
    # Extract first numeric 'x[.y[.z]]' sequence and convert to [version]
    if ([string]::IsNullOrWhiteSpace($VersionString)) {
        return [version]"0.0.0"
    }

    $m = [regex]::Match($VersionString, '\d+(\.\d+){0,3}')
    if ($m.Success) {
        try {
            return [version]$m.Value
        } catch {
            return [version]"0.0.0"
        }
    } else {
        return [version]"0.0.0"
    }
}

function Compare-Version {
    param(
        [Parameter(Mandatory=$true)][string]$v1,
        [Parameter(Mandatory=$true)][string]$v2
    )
    # Returns:
    #   -1 if v1 < v2
    #    0 if v1 == v2
    #    1 if v1 > v2
    $ver1 = Normalize-Version -VersionString $v1
    $ver2 = Normalize-Version -VersionString $v2
    return $ver1.CompareTo($ver2)
}

# ============================================================
# Main script
# ============================================================

Write-Host "Checking installed VMware Tools version..." -ForegroundColor Cyan

$targetVersion = "13.0.5"
$regUninstallPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*"

# Try to find VMware Tools via the Uninstall registry keys (64-bit view)
$vmwareTools = Get-ItemProperty -Path $regUninstallPath -ErrorAction SilentlyContinue |
    Where-Object { $_.DisplayName -eq "VMware Tools" } |
    Select-Object -First 1

if (-not $vmwareTools) {
    Write-Host "‚ùå VMware Tools not found. System reboot required." -ForegroundColor Red
    shutdown /r /t 60 /c "VMware Tools not detected. System will reboot in 60 seconds."
    Write-Host "You can cancel reboot using: shutdown /a"
    exit 1
}

$installedVersion = $vmwareTools.DisplayVersion
Write-Host "üü° VMware Tools detected - Installed Version: $installedVersion"

$versionCheck = Compare-Version -v1 $installedVersion -v2 $targetVersion

if ($versionCheck -ne 0) {
    Write-Host "‚ö†Ô∏è VMware Tools $targetVersion not installed. Current version is $installedVersion." -ForegroundColor Yellow
    Write-Host "Rebooting system for compliance..." -ForegroundColor Cyan
    shutdown /r /t 60 /c "VMware Tools 13.0.5 not detected. System will reboot in 60 seconds."
    Write-Host "You can cancel reboot using: shutdown /a"
    exit 1
}

Write-Host "‚úÖ VMware Tools $targetVersion is installed. Proceeding with cleanup of older registry entries.`n"

# ============================================================
# Backup Uninstall registry hive
# ============================================================

$regPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"
$backupDir = "C:\OS"
$backupFile = Join-Path $backupDir "Uninstall_Backup.reg"

if (-not (Test-Path -Path $backupDir)) {
    New-Item -Path $backupDir -ItemType Directory -Force | Out-Null
}

Write-Host "Backing up registry path to $backupFile..." -ForegroundColor Cyan
& reg export "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" "$backupFile" /y

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Registry backup completed successfully.`n"
} else {
    Write-Host "‚ùå Registry export failed. Aborting cleanup for safety." -ForegroundColor Red
    exit 1
}

# ============================================================
# Identify & delete VMware Tools registry entries older than target
# (Check both 64-bit and 32-bit uninstall locations)
# ============================================================

$regPathsToScan = @(
    "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall",
    "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
)

$oldKeys = @()

foreach ($rPath in $regPathsToScan) {
    $items = Get-ChildItem -Path $rPath -ErrorAction SilentlyContinue
    foreach ($key in $items) {
        try {
            $props = Get-ItemProperty -Path $key.PSPath -ErrorAction Stop
            if ($props.DisplayName -eq "VMware Tools" -and $props.DisplayVersion) {
                $cmp = Compare-Version -v1 $props.DisplayVersion -v2 $targetVersion
                if ($cmp -lt 0) {
                    $oldKeys += @{
                        Path = $key.PSPath
                        Version = $props.DisplayVersion
                    }
                }
            }
        } catch {
            # ignore inaccessible/nonstandard keys
        }
    }
}

if ($oldKeys.Count -eq 0) {
    Write-Host "‚úÖ No VMware Tools registry entries below version $targetVersion found." -ForegroundColor Green
} else {
    Write-Host "üü† Found the following older VMware Tools registry entries to delete:" -ForegroundColor Yellow
    $oldKeys | ForEach-Object { Write-Host (" - {0} (version {1})" -f $_.Path, $_.Version) }

    $confirmation = Read-Host "`nProceed to delete these registry keys? (Y/N)"
    if ($confirmation -notmatch '^[Yy]') {
        Write-Host "Operation cancelled by user. Exiting without deleting keys." -ForegroundColor Yellow
        exit 0
    }

    foreach ($entry in $oldKeys) {
        try {
            Remove-Item -Path $entry.Path -Recurse -Force -ErrorAction Stop
            Write-Host "üóëÔ∏è Deleted: $($entry.Path) (version $($entry.Version))"
        } catch {
            Write-Host "‚ùå Failed to delete: $($entry.Path) - $($_.Exception.Message)" -ForegroundColor Red
        }
    }
}

# ============================================================
# Verification step: report installed VMware Tools version (final)
# ============================================================

Write-Host "`nVerifying installed VMware Tools version after cleanup..." -ForegroundColor Cyan

# Prefer WMI/Win32_Product (may be slow) but also check registry.
$vmwareWmi = Get-WmiObject -Class Win32_Product -Filter "Name='VMware Tools'" -ErrorAction SilentlyContinue
$vmwareReg = Get-ItemProperty -Path $regUninstallPath -ErrorAction SilentlyContinue |
    Where-Object { $_.DisplayName -eq "VMware Tools" } |
    Select-Object -First 1

if ($vmwareWmi) {
    $current = $vmwareWmi.Version
    Write-Host "WMI reports VMware Tools installed version: $current"
} elseif ($vmwareReg) {
    $current = $vmwareReg.DisplayVersion
    Write-Host "Registry reports VMware Tools installed version: $current"
} else {
    Write-Host "‚ùå VMware Tools not found via WMI or registry after cleanup. Restoring registry backup..." -ForegroundColor Red
    & reg import "$backupFile"
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Registry backup restored successfully." -ForegroundColor Green
    } else {
        Write-Host "‚ùå Registry restore failed. Please check manually." -ForegroundColor Red
    }
    # After restore, still continue to reboot as per workflow
    $current = $null
}

if ($current) {
    $cmpFinal = Compare-Version -v1 $current -v2 $targetVersion
    if ($cmpFinal -eq 0) {
        Write-Host "‚úÖ Verification Passed: VMware Tools $current is installed." -ForegroundColor Green
    } elseif ($cmpFinal -lt 0) {
        Write-Host "‚ö†Ô∏è Verification Warning: VMware Tools version is older ($current). Consider upgrade to $targetVersion." -ForegroundColor Yellow
    } else {
        Write-Host "‚ÑπÔ∏è VMware Tools version $current detected (newer than $targetVersion)." -ForegroundColor Cyan
    }
}

# ============================================================
# Final step: Reboot
# ============================================================

Write-Host "`n‚öôÔ∏è Cleanup/verification complete. System will reboot in 60 seconds..." -ForegroundColor Cyan
shutdown /r /t 60 /c "VMware Tools cleanup and verification completed. System will reboot in 60 seconds."
Write-Host "You can cancel reboot using: shutdown /a" -ForegroundColor Yellow

exit 0
