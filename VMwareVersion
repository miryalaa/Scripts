# PowerShell Script: Backup + Detect + Delete Old VMware Tools Registry Entries

# Define registry path and backup directory
$regPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"
$backupDir = "C:\OS"
$backupFile = Join-Path $backupDir "Uninstall_Backup.reg"

# Ensure backup directory exists
if (-not (Test-Path -Path $backupDir)) {
    New-Item -Path $backupDir -ItemType Directory -Force | Out-Null
}

# Step 1: Backup the registry key
Write-Host "Backing up registry path to $backupFile..."
& reg export "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" "$backupFile" /y
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Registry backup completed successfully.`n"
} else {
    Write-Host "‚ùå Failed to export registry key. Aborting deletion for safety."
    exit
}

# Step 2: Scan for VMware Tools below version 13.x
Write-Host "Scanning for VMware Tools installations below version 13.x...`n"

$subKeys = Get-ChildItem -Path $regPath -ErrorAction SilentlyContinue
$foundKeys = @()

foreach ($key in $subKeys) {
    try {
        $props = Get-ItemProperty -Path $key.PSPath -ErrorAction Stop
        $displayName = $props.DisplayName
        $displayVersion = $props.DisplayVersion

        if ($displayName -eq "VMware Tools" -and $displayVersion) {
            $majorVersion = [int]($displayVersion.Split('.')[0])
            if ($majorVersion -lt 13) {
                Write-Host "üü° Found: $($key.PSPath)"
                Write-Host "DisplayVersion: $displayVersion"
                Write-Host "--------------------------------------------"
                $foundKeys += $key.PSPath
            }
        }
    } catch {}
}

if ($foundKeys.Count -eq 0) {
    Write-Host "‚úÖ No VMware Tools entries below version 13.x found."
    exit
}

# Step 3: Confirm and delete old VMware Tools entries
Write-Host "`nThe following keys will be deleted:"
$foundKeys | ForEach-Object { Write-Host " - $_" }

$confirmation = Read-Host "`nDo you want to proceed with deletion? (Y/N)"
if ($confirmation -match '^[Yy]$') {
    foreach ($path in $foundKeys) {
        try {
            Remove-Item -Path $path -Recurse -Force -ErrorAction Stop
            Write-Host "üóëÔ∏è Deleted: $path"
        } catch {
            Write-Host "‚ùå Failed to delete: $path - $($_.Exception.Message)"
        }
    }
    Write-Host "`n‚úÖ Deletion process completed."
} else {
    Write-Host "`nOperation cancelled. No registry entries were deleted."
}
